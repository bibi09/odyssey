/** @file Security_Client.h
 * Provide the security API for a client.
 * @author Adrien RICCIARDI
 * @version 1.0 : 23/01/2014
 */
#ifndef H_SECURITY_CLIENT_H
#define H_SECURITY_CLIENT_H

#include "Robot.h"

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
// Functions
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Initialize client security subsystem.
 * @param String_Keys_File_Path Path to the file containing the elliptic curve, the publics and the private keys. This file is generated by the function SecurityGenerateKeys().
 * @param String_Counter_File_Path Path to the anti replay counter.
 * @return 0 if the initialization succeeded,
 * @return 1 if the keys file is missing or in bad format,
 * @return 2 if the counter file is missing or in bad format.
 */
int SecurityClientInit(char *String_Keys_File_Path, char *String_Counter_File_Path);

/** Be sure that the server is the good one. This function is called only by Jupiter or Io.
 * @param Socket_Server The server to check identity.
 * @return 1 if the server has been successfully authenticated or 0 if not.
 */
int SecurityClientAuthenticateServer(int Socket_Server);

/** Send a command to the robot.
 * @param Socket_Server The robot server's socket.
 * @param Command The command to send.
 * @return 1 if the command was successfully sent,
 * @return 0 if the socket write failed or the message was corrupted.
 */
int SecurityClientSendRobotCommand(int Socket_Server, TRobotCommand Command);

/** Receive a control data from the robot.
 * @param Socket_Server The robot server's socket.
 * @param Pointer_Data On output, will contain the received data.
 * @return 1 if the data was successfully retrieved,
 * @return 0 if the socket read failed or the message was corrupted.
 */
int SecurityClientReceiveRobotData(int Socket_Server, int *Pointer_Data);

/** Receive video streaming data from the server.
 * @param Socket_Server The video stream source.
 * @param Pointer_Received_Buffer On output, contain the received data. Be sure that the buffer has enough room to contain the data.
 * @param Pointer_Received_Buffer_Size On output, contain the size of the received buffer. Due to AES encryption, the received buffer is padded on a 16-byte boundary.
 * @return 1 if the data was successfully received or 0 if the connection dropped.
 * @warning The maximum buffer size that can be received is defined by macro SECURITY_VIDEO_BUFFER_MAXIMUM_SIZE_BYTES.
 */
int SecurityClientReceiveVideoBuffer(int Socket_Server, void *Pointer_Received_Buffer, int *Pointer_Received_Buffer_Size);

/** Free allocated resources. */
void SecurityClientQuit(void);

#endif
