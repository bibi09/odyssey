/** @file Security_Server.h
 * Provide security API for the server.
 * @author Adrien RICCIARDI
 * @version 1.0 : 23/01/2014
 */
#ifndef H_SECURITY_SERVER_H
#define H_SECURITY_SERVER_H

#include "Robot.h"

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
// Constants
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
/** How many clients the server can handle. */
#define SECURITY_SERVER_MAXIMUM_CLIENTS_COUNT 2

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
// Functions
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Initialize server security subsystem.
 * @param String_Keys_File_Path Path to the file containing the elliptic curve, the publics and the private keys. This file is generated by the function SecurityGenerateKeys().
 * @param String_Counters_File_Path Path to the anti replay counters.
 * @return 0 if the initialization succeeded,
 * @return 1 if the keys file is missing or in bad format,
 * @return 2 if the counters file is missing or in bad format.
 */
int SecurityServerInit(char *String_Keys_File_Path, char *String_Counters_File_Path);

/** Be sure that the client is the good one. This function is called by Polyphemus only.
 * @param Socket_Client The client to check identity.
 * @return 1 if the client has been successfully authenticated or 0 if not.
 */
int SecurityServerAuthenticateClient(int Socket_Client);

/** Wait for a client's command.
 * @param Socket_Client The socket from which to receive the command.
 * @param Pointer_Received_Command On output, contain the received command.
 * @return 1 if a command was successfully received,
 * @return 0 if the connection dropped or the message was corrupted.
 */
int SecurityServerReceiveRobotCommand(int Socket_Client, TRobotCommand *Pointer_Received_Command);

/** Send a data to the client.
 * @param Socket_Client The socket to which send data.
 * @param Data The data to send.
 * @return 1 if a command was successfully received,
 * @return 0 if the connection dropped or the message was corrupted.
 */
int SecurityServerSendRobotData(int Socket_Client, int Data);

/** Send video streaming data to the client.
 * @param Socket_Client The recipient of the video stream.
 * @param Pointer_Buffer The data to send.
 * @param Buffer_Size Size of the buffer in bytes.
 * @return 1 if the data was successfully sent or 0 if the connection dropped.
 * @warning The maximum buffer size that can be sent is defined by macro SECURITY_VIDEO_BUFFER_MAXIMUM_SIZE_BYTES.
 */
int SecurityServerSendVideoBuffer(int Socket_Client, void *Pointer_Buffer, int Buffer_Size);

/** Free allocated resources. */
void SecurityServerQuit(void);

#endif

