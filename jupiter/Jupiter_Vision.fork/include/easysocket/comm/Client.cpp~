#include "Client.h"
#include "../tools/Allegro.h"
#include "../levels/LevelMap.h"
#include "../levels/Position.h"
#include "../characters/BadGuy.h"

#include "../tools/pathfinding/Pathfinder.h"
#include <vector>

using namespace std ;
using namespace json_spirit ;

Client* Client::Instance = 0 ;

void Client::run() {
    bool run = true ;
    int socket = (getInstance() -> m_socket).getSocket() ;
    unsigned char protocol ;        // Protocol to handle the message
    string buffer ;                 // Buffer containing the JSON messages
    mObject message ;               // The JSON message as an object
    mValue value ;                  // Used to store the values in the JSON
    bool good_read ;                // To know if the JSON has been well read

    while (run && ((getInstance() -> m_socket).recv(socket, buffer))) {
        // The client only waits for text messages with printable characters
        if (buffer[0] > 32 && buffer[0] < 127) {
            // Parse the JSON message received
            protocol = -1 ;
            good_read = json_spirit::read(buffer, value) ;
            if (good_read) {
                message = value.get_obj() ;
                protocol = message.find("protocol") -> second.get_int() ;

                switch(protocol) {
                    case PROTOCOL_GET_PREDICT:
                        getPrediction(message) ;
                }
            }
            else {
                Logger::print("Unable to parse JSON message: " + buffer) ;
                // @TODO inform of bad request
            }

            pthread_mutex_lock(&m_clientState) ;
                // CRITICAL SECTION BEGINS
                pthread_yield() ;
                run = m_isRunning ;
                // CRITICAL SECTION ENDS
            pthread_mutex_unlock(&m_clientState) ;    
        }

        buffer.clear() ;
    }
}


void Client::getPrediction(const mObject& o) {
    vector<Position> predict ;

    unsigned short x = strtod(o.find("to_x-1") -> second.get_str().c_str(), NULL) ;
    unsigned short y = strtod(o.find("to_y-1") -> second.get_str().c_str(), NULL) ;
    Position p1 = {x, y} ;
    predict.push_back(p1) ;

    if (o.find("to_x-2") -> second.type() == json_spirit::Value_type::str_type) {
        x = strtod(o.find("to_x-2") -> second.get_str().c_str(), NULL) ;
        y = strtod(o.find("to_y-2") -> second.get_str().c_str(), NULL) ;
        Position p2 = {x, y} ;
        predict.push_back(p2) ;
    }


    LevelMap* map = Allegro::getInstance() -> getMap() ;
    vector<Character*> bots = Allegro::getInstance() -> getBots() ;
    for (unsigned char i = 0 ; i < bots.size() ; i++) {
        if (i < predict.size())
            ((BadGuy*) bots[i]) -> findPathTo(predict[i]) ;
        else
            ((BadGuy*) bots[i]) -> findPathTo(predict[0]) ;
    }
}
