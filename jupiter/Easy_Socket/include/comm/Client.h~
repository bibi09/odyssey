#ifndef __CLIENT_H__
#define __CLIENT_H__

#include "sockets/InternetSocket.h"
#include "../tools/Logger.h"
#include <json_spirit.h>

#include <assert.h>
#include <pthread.h>
#include <string>
#include <cstdlib>
#include <ctime>

/**
 * @brief A client sends and receives data to one server only.
 *
 * @version 1.0     04/08/2013
 * @author Denis CARLUS
 */
class Client {
    protected:
        /** @brief  Instance of the client. */
        static Client* Instance ;

        /** @brief  Session of the user. */
        std::string m_session ;

        /** @brief Socket of the client. */
        InternetSocket m_socket ;

        /** @brief  To know if the thread is running. */
        bool m_isRunning ;

        /**
         * @brief   Mutex used to generate critical sections when accessing the
         *          client thread.
         */
        pthread_mutex_t m_clientState ;

    public:
        /**
         * @brief   Creation of a new client, connected to the given server.
         * @param   serverIP    IP of the server to connect to.
         * @param   serverPort  Port of the server to be connected.
         */
        Client(const std::string& serverIP, unsigned short serverPort) {
            assert(pthread_mutex_init(&m_clientState, NULL) == 0) ;

            pthread_mutex_lock(&m_clientState) ;
                Logger::print("Connecting to server " + serverIP + ":" + std::to_string(serverPort)) ;
                m_socket.connect(serverIP.c_str(), serverPort) ;
                m_isRunning = false ;

                srand(time(0)) ;
                m_session = std::to_string(rand()) ;

                if (Instance != 0)
                    delete Instance ;
                Instance = this ;
            pthread_mutex_unlock(&m_clientState) ;
        }

        /** @brief  Destruction of a client. */
        virtual ~Client() {
            pthread_mutex_destroy(&m_clientState) ;
        }


        /** @brief  Get the instance of the client. */
        static Client* getInstance() {
            return Instance ;
        }


        /** @brief  Get the session determined at client starting. */
        const std::string& getSession() {
            return m_session ;
        }


        /** @brief  Start the client thread. */
        virtual void start() {
            pthread_t clientThread ;
            assert(pthread_create(&clientThread, 0, &Client::manageThread, 0) == 0) ;

            pthread_mutex_lock(&m_clientState) ;
            m_isRunning = true ;
            pthread_mutex_unlock(&m_clientState) ;
        }

        /** @brief  Safely stop the thread. */
        virtual void stop() {
            pthread_mutex_lock(&m_clientState) ;
            m_isRunning = false ;
            pthread_mutex_unlock(&m_clientState) ;
        }

        /**
         * @brief   The client sends a message to the server.
         * @param   message The message to send.
         */
        virtual void send(const std::string& message) {
            pthread_mutex_lock(&m_clientState) ;
            // CRITICAL SECTION STARTS
                if (m_isRunning) {
                    Logger::print("Sending: " + message) ;
                    m_socket.send(m_socket.getSocket(), message) ;
                }
            // CRITICAL SECTION ENDS
            pthread_mutex_unlock(&m_clientState) ;
        }

    protected:
        /** @brief  Intermediate function to call run... */
        static void* manageThread(void* param) {
            Instance -> run() ;
            return 0 ;
        }

        /** @brief  Run the client thread. Call stop() to stop it. */
        virtual void run() ;


        /**
         * @brief   Read the prediction message received from the server.
         * @param   o   The message containing the predicted position.
         */
        virtual void getPrediction(const json_spirit::mObject& o) ;
} ;

#endif
